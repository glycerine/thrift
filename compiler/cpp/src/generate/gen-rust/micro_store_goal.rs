/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
mod micro_types;

trait MicroStore {
  fn year_to_string (&mut self, const YYYY * yr) -> gchar *;
}

/* MicroStore service client */
struct MicroStoreClient
{
  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _MicroStoreClient MicroStoreClient;

trait MicroStoreClientClass
{

}
fn micro_store_client_year_to_string (&mut self, const YYYY * yr) -> gchar *;
fn micro_store_client_send_year_to_string (&mut self, const YYYY * yr);
fn micro_store_client_recv_year_to_string (&mut self) -> gchar *;
fn micro_store_client_set_property (&mut self, guint property_id, const GValue *value, GParamSpec *pspec);
fn micro_store_client_get_property (&mut self, guint property_id, GValue *value, GParamSpec *pspec);

gboolean
micro_store_if_year_to_string (MicroStoreIf *iface, gchar ** _return, const YYYY * yr, GError **error)
{
  return MICRO_STORE_IF_GET_INTERFACE (iface)->year_to_string (iface, _return, yr, error);
}

GType
micro_store_if_get_type (void)
{
  static GType type = 0;
  if (type == 0)
  {
    static const GTypeInfo type_info =
    {
      sizeof (MicroStoreIfInterface),
      NULL,  /* base_init */
      NULL,  /* base_finalize */
      NULL,  /* class_init */
      NULL,  /* class_finalize */
      NULL,  /* class_data */
      0,     /* instance_size */
      0,     /* n_preallocs */
      NULL,  /* instance_init */
      NULL   /* value_table */
    };
    type = g_type_register_static (G_TYPE_INTERFACE,
                                   "MicroStoreIf",
                                   &type_info, 0);
  }
  return type;
}

static void 
micro_store_if_interface_init (MicroStoreIfInterface *iface);

G_DEFINE_TYPE_WITH_CODE (MicroStoreClient, micro_store_client,
                       G_TYPE_OBJECT, 
                         G_IMPLEMENT_INTERFACE (TYPE_MICRO_STORE_IF,
                                                micro_store_if_interface_init));

enum _MicroStoreClientProperties
{
  PROP_0,
  PROP_MICRO_STORE_CLIENT_INPUT_PROTOCOL,
  PROP_MICRO_STORE_CLIENT_OUTPUT_PROTOCOL
};

void
micro_store_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec)
{
  MicroStoreClient *client = MICRO_STORE_CLIENT (object);

  THRIFT_UNUSED_VAR (pspec);

  switch (property_id)
  {
    case PROP_MICRO_STORE_CLIENT_INPUT_PROTOCOL:
      client->input_protocol = g_value_get_object (value);
      break;
    case PROP_MICRO_STORE_CLIENT_OUTPUT_PROTOCOL:
      client->output_protocol = g_value_get_object (value);
      break;
  }
}

void
micro_store_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec)
{
  MicroStoreClient *client = MICRO_STORE_CLIENT (object);

  THRIFT_UNUSED_VAR (pspec);

  switch (property_id)
  {
    case PROP_MICRO_STORE_CLIENT_INPUT_PROTOCOL:
      g_value_set_object (value, client->input_protocol);
      break;
    case PROP_MICRO_STORE_CLIENT_OUTPUT_PROTOCOL:
      g_value_set_object (value, client->output_protocol);
      break;
  }
}

fn micro_store_client_send_year_to_string (&mut self, const YYYY * yr)
{
  gint32 cseqid = 0;
  ThriftProtocol * protocol = MICRO_STORE_CLIENT (iface)->output_protocol;

  if (thrift_protocol_write_message_begin (protocol, "yearToString", T_CALL, cseqid, error) < 0)
    return FALSE;

  {
    gint32 ret;
    gint32 xfer = 0;

    
    if ((ret = thrift_protocol_write_struct_begin (protocol, "yearToString_args", error)) < 0)
      return 0;
    xfer += ret;
    if ((ret = thrift_protocol_write_field_begin (protocol, "yr", T_STRUCT, 1, error)) < 0)
      return 0;
    xfer += ret;
    if ((ret = thrift_struct_write (THRIFT_STRUCT (yr), protocol, error)) < 0)
      return 0;
    xfer += ret;

    if ((ret = thrift_protocol_write_field_end (protocol, error)) < 0)
      return 0;
    xfer += ret;
    if ((ret = thrift_protocol_write_field_stop (protocol, error)) < 0)
      return 0;
    xfer += ret;
    if ((ret = thrift_protocol_write_struct_end (protocol, error)) < 0)
      return 0;
    xfer += ret;

  }

  if (thrift_protocol_write_message_end (protocol, error) < 0)
    return FALSE;
  if (!thrift_transport_flush (protocol->transport, error))
    return FALSE;
  if (!thrift_transport_write_end (protocol->transport, error))
    return FALSE;

  return TRUE;
}

fn micro_store_client_recv_year_to_string (&mut self) -> gchar *
{

  gint32 rseqid;
  gchar * fname;
  ThriftMessageType mtype;
  ThriftProtocol * protocol = MICRO_STORE_CLIENT (iface)->input_protocol;

  if (thrift_protocol_read_message_begin (protocol, &fname, &mtype, &rseqid, error) < 0)
  {
    if (fname) g_free (fname);
    return FALSE;
  }

  if (mtype == T_EXCEPTION) {
    if (fname) g_free (fname);
    ThriftApplicationException *xception = g_object_new (THRIFT_TYPE_APPLICATION_EXCEPTION, NULL);
    thrift_struct_read (THRIFT_STRUCT (xception), protocol, NULL);
    thrift_protocol_read_message_end (protocol, NULL);
    thrift_transport_read_end (protocol->transport, NULL);
    g_set_error (error, THRIFT_APPLICATION_EXCEPTION_ERROR, xception->type, "application error: %s", xception->message);
    g_object_unref (xception);
    return FALSE;
  } else if (mtype != T_REPLY) {
    if (fname) g_free (fname);
    thrift_protocol_skip (protocol, T_STRUCT, NULL);
    thrift_protocol_read_message_end (protocol, NULL);
    thrift_transport_read_end (protocol->transport, NULL);
    g_set_error (error, THRIFT_APPLICATION_EXCEPTION_ERROR, THRIFT_APPLICATION_EXCEPTION_ERROR_INVALID_MESSAGE_TYPE, "invalid message type %d, expected T_REPLY", mtype);
    return FALSE;
  } else if (strncmp (fname, "yearToString", 12) != 0) {
    thrift_protocol_skip (protocol, T_STRUCT, NULL);
    thrift_protocol_read_message_end (protocol, error);
    thrift_transport_read_end (protocol->transport, error);
    g_set_error (error, THRIFT_APPLICATION_EXCEPTION_ERROR, THRIFT_APPLICATION_EXCEPTION_ERROR_WRONG_METHOD_NAME, "wrong method name %s, expected yearToString", fname);
    if (fname) g_free (fname);
    return FALSE;
  }
  if (fname) g_free (fname);

  {
    gint32 ret;
    gint32 xfer = 0;
    gchar *name = NULL;
    ThriftType ftype;
    gint16 fid;
    guint32 len = 0;
    gpointer data = NULL;
    

    /* satisfy -Wall in case these aren't used */
    THRIFT_UNUSED_VAR (len);
    THRIFT_UNUSED_VAR (data);

    /* read the struct begin marker */
    if ((ret = thrift_protocol_read_struct_begin (protocol, &name, error)) < 0)
    {
      if (name) g_free (name);
      return 0;
    }
    xfer += ret;
    if (name) g_free (name);
    name = NULL;

    /* read the struct fields */
    while (1)
    {
      /* read the beginning of a field */
      if ((ret = thrift_protocol_read_field_begin (protocol, &name, &ftype, &fid, error)) < 0)
      {
        if (name) g_free (name);
        return 0;
      }
      xfer += ret;
      if (name) g_free (name);
      name = NULL;

      /* break if we get a STOP field */
      if (ftype == T_STOP)
      {
        break;
      }

      switch (fid)
      {
        case 0:
          if (ftype == T_STRING)
          {
            if (*_return != NULL)
            {
              g_free(*_return);
              *_return = NULL;
            }

            if ((ret = thrift_protocol_read_string (protocol, &*_return, error)) < 0)
              return 0;
            xfer += ret;
          } else {
            if ((ret = thrift_protocol_skip (protocol, ftype, error)) < 0)
              return 0;
            xfer += ret;
          }
          break;
        default:
          if ((ret = thrift_protocol_skip (protocol, ftype, error)) < 0)
            return 0;
          xfer += ret;
          break;
      }
      if ((ret = thrift_protocol_read_field_end (protocol, error)) < 0)
        return 0;
      xfer += ret;
    }

    if ((ret = thrift_protocol_read_struct_end (protocol, error)) < 0)
      return 0;
    xfer += ret;

  }

  if (thrift_protocol_read_message_end (protocol, error) < 0)
    return FALSE;

  if (!thrift_transport_read_end (protocol->transport, error))
    return FALSE;

  return TRUE;
}

fn micro_store_client_year_to_string (&mut self, const YYYY * yr) -> gchar *
{
  if (!micro_store_client_send_year_to_string (iface, yr, error))
    return FALSE;
  if (!micro_store_client_recv_year_to_string (iface, _return, error))
    return FALSE;
  return TRUE;
}

static void
micro_store_if_interface_init (MicroStoreIfInterface *iface)
{
  iface->year_to_string = micro_store_client_year_to_string;
}

static void
micro_store_client_init (MicroStoreClient *client)
{
  client->input_protocol = NULL;
  client->output_protocol = NULL;
}

static void
micro_store_client_class_init (MicroStoreClientClass *cls)
{
  GObjectClass *gobject_class = G_OBJECT_CLASS (cls);
  GParamSpec *param_spec;

  gobject_class->set_property = micro_store_client_set_property;
  gobject_class->get_property = micro_store_client_get_property;

  param_spec = g_param_spec_object ("input_protocol",
                                    "input protocol (construct)",
                                    "Set the client input protocol",
                                    THRIFT_TYPE_PROTOCOL,
                                    G_PARAM_READWRITE);
  g_object_class_install_property (gobject_class,
                                   PROP_MICRO_STORE_CLIENT_INPUT_PROTOCOL, param_spec);

  param_spec = g_param_spec_object ("output_protocol",
                                    "output protocol (construct)",
                                    "Set the client output protocol",
                                    THRIFT_TYPE_PROTOCOL,
                                    G_PARAM_READWRITE);
  g_object_class_install_property (gobject_class,
                                   PROP_MICRO_STORE_CLIENT_OUTPUT_PROTOCOL, param_spec);
}

